require 'fileutils'

fastlane_version "2.75.1"

default_platform :ios

platform :ios do

  desc 'Test framework'
  desc 'Generate coverage'
  lane :test do
    scan(
      workspace: 'OpenLocate.xcworkspace',
      scheme: 'OpenLocate',
      device: 'iPhone 7',
      code_coverage: true,
      skip_build: true
    )
    
    xcov(
      workspace: 'OpenLocate.xcworkspace',
      scheme: 'OpenLocate',
    )

  end

  desc 'Ensure git is clean'
  desc 'build'
  desc 'Push to Fabric BETA'
  lane :deploy_beta do
    xcodeproj = 'Example/iOS Example.xcodeproj'
    scheme = ‘OpenLocate Example’

    # ensure that the branch is clean
    ensure_git_status_clean

    # Change build number to current time stamp
    build_number = Time.new.strftime("%Y.%m.%d.%H.%M")
    increment_build_number(
      build_number: build_number,
      xcodeproj: xcodeproj
    )

    # set secret keys
    set_info_plist_value(path: "./Example/Resources/Info.plist", key: "Token", value: ENV['OPEN_LOCATE_TOKEN'])
    set_info_plist_value(path: "./Example/Resources/Info.plist", key: "ProviderId", value: ENV['OPEN_LOCATE_PROVIDER_ID'])

    cert(username: ENV["APPLE_DEVELOPER_EMAIL"])

    sigh(username: ENV["APPLE_DEVELOPER_EMAIL"], adhoc: true)

    # build example app
    gym(
      scheme: scheme,
      export_method: "ad-hoc"
    )

    crashlytics(api_token: ENV["FABRIC_API_TOKEN"],
             build_secret: ENV["FABRIC_BUILD_SECRET"],
                   groups: ENV["FABRIC_GROUPS"],
            notifications: true)

    clean_build_artifacts
  end

  desc "Zip and copy to right folder"
  private_lane :package do |lane|

    if !lane[:version]
      raise "No version specified!".red
    end

    version = lane[:version]

    zip_file = "#{version}.zip"

    FileUtils::rm_rf "../build/Source" #../build/Source
    FileUtils::cp_r "../Source", "../build/Source" 
    FileUtils::rm_rf "../build/#{zip_file}" #../build/0.4.5.zip

    sh "cd ..
      mkdir -p build
      cd build
      zip -r -X #{zip_file} Source"
  end

  desc "Deploy/upload framework"
  private_lane :deploy do |lane|

    if !lane[:version]
      raise "No version specified!".red
    end

    version = lane[:version]
    file = "build/#{version}.zip"

    upload_to_s3(
      region: ENV['S3_REGION'],
      bucket: ENV['S3_BUCKET'],
      access_key: ENV['S3_ACCESS_KEY'],
      secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
      acl: "public-read",
      key: "#{version}.zip",
      file: file
    )
  end

  desc "Updates framework podspec version"
  private_lane :update_podspec do |lane|

    if !lane[:version]
      raise "No version specified!".red
    end

    version = lane[:version]
    podspec = "OpenLocate.podspec"
    version_bump_podspec(
      path: podspec,
      version_number: version
    )
  end

  desc "Pushes framework podspec to HyperTrack specs"
  private_lane :push_podspec do |lane|

    podspec = "OpenLocate.podspec"

    pod_push(
      path: podspec,
    )
  end

  desc 'Ensure git clean and master'
  desc 'Test Framework'
  desc 'Build Framework'
  desc 'Increment Framework'
  desc 'Packages framework'
  desc 'Updates podspec file'
  desc 'Push pod spec'
  lane :release do |lane|
    
    if !lane[:version]
      raise "No version specified!".red
    end
    
    ensure_git_status_clean
    ensure_git_branch

    test

    version = lane[:version]
    
    increment_version_number(
      version_number: version
    )
    package version: version
    deploy version: version
    update_podspec version: version
    push_podspec

    # # post message to slack
    # slack(
    #   message: 'Published new version of the SDK :rocket:',
    #   success: true,
    #   payload: {
    #     'Version' => version,
    #   },
    # )
    
  end

  desc 'Post to slack if error'
  error do |lane, exception|
    clean_build_artifacts
  end

end
